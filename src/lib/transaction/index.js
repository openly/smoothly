// Generated by CoffeeScript 1.7.1
(function() {
  var Action, State, Transaction, uuid, _;

  _ = require('underscore');

  State = require('./state');

  Action = require('./action');

  uuid = require('../util/uuid');

  Transaction = (function() {
    function Transaction(name) {
      this.name = name;
      this.states = [];
      this.transitions = [];
      this.currentState = 'start';
    }

    Transaction.prototype.setLogger = function(logger) {
      return this.logger = logger;
    };

    Transaction.prototype.addState = function(state) {
      return this.states.push(state);
    };

    Transaction.prototype.addTransition = function(event, stateName) {
      return this.transitions.push({
        'event': event,
        'state': stateName
      });
    };

    Transaction.prototype.exec = function(data, callback) {
      var endAction, endState;
      this.id = uuid();
      endState = new State('end');
      endAction = new Action;
      endAction.onExec = callback;
      endState.setAction(endAction);
      this.addState(endState);
      this.addTransition('end', 'end');
      return this.raiseEvent('start', data);
    };

    Transaction.prototype.raiseEvent = function(event, data) {
      var stateObj, transition;
      if (this.logger != null) {
        this.logger.logTransition(this, event, data);
      }
      transition = this.findEventTransition(event);
      if (transition == null) {
        return this.raiseEvent('end', data);
      }
      stateObj = this.getState(transition.state);
      this.currentState = stateObj;
      if (stateObj == null) {
        throw new Error("State " + transition.state + " has no object set.");
      }
      return stateObj.enter(data, (function(_this) {
        return function(status, newData) {
          if (_this.logger != null) {
            _this.logger.logStateStatus(_this, stateObj, status, newData);
          }
          if (typeof status === "string") {
            _this.raiseEvent("" + (stateObj.getName()) + "." + status, newData);
          }
          if (status instanceof Array) {
            return _this.checkAndRaise(stateObj.getName(), status, newData);
          }
        };
      })(this));
    };

    Transaction.prototype.checkAndRaise = function(stateName, statuses, data) {
      var selStatus;
      selStatus = _.find(statuses, (function(_this) {
        return function(status) {
          var transition;
          transition = _this.findEventTransition("" + stateName + "." + status);
          return transition != null;
        };
      })(this));
      return this.raiseEvent("" + stateName + "." + selStatus, data);
    };

    Transaction.prototype.findEventTransition = function(event) {
      return _.find(this.transitions, function(transition) {
        return transition.event === event;
      });
    };

    Transaction.prototype.getState = function(name) {
      return _.find(this.states, function(state) {
        return state.getName() === name;
      });
    };

    return Transaction;

  })();

  module.exports = Transaction;

}).call(this);
