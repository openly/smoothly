// Generated by CoffeeScript 1.7.1
var Action, IterateAction, async, objval, setobjval,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Action = require('../action');

objval = require('../../util/objval');

setobjval = require('../../util/setobjval');

async = require('async');

IterateAction = (function(_super) {
  __extends(IterateAction, _super);

  function IterateAction(action, dataKey) {
    this.action = action;
    this.dataKey = dataKey;
  }

  IterateAction.prototype.onExec = function(data, callback) {
    var targetData;
    targetData = objval(data, this.dataKey);
    if (!(targetData instanceof Array)) {
      callback(['no_action', 'success'], data);
    }
    return async.map(targetData, (function(_this) {
      return function(item, callback) {
        return _this.action.exec(item, function(status, newItem) {
          return callback(null, newItem);
        });
      };
    })(this), (function(_this) {
      return function(e, results) {
        return callback('success', setobjval(data, _this.dataKey, results));
      };
    })(this));
  };

  return IterateAction;

})(Action);

module.exports = IterateAction;
