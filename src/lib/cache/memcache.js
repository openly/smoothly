// Generated by CoffeeScript 1.7.1
var Cache, Memcache, Memcached,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Memcached = require('memcached');

Cache = require('./cache.js');

Memcache = (function(_super) {
  __extends(Memcache, _super);

  function Memcache(memcacheServerUrl, options) {
    this.set = __bind(this.set, this);
    this.memcached = new Memcached(memcacheServerUrl, options);
  }

  Memcache.prototype.get = function(key, callback) {
    return this.memcached.get(key, callback);
  };

  Memcache.prototype.set = function(key, val, ttl, callback) {
    return this.memcached.set(key, val, ttl, callback);
  };

  return Memcache;

})(Cache);

module.exports = Memcache;
