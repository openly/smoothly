// Generated by CoffeeScript 1.7.1
var DBCache, DBInterface, DBSchema, mongodb;

mongodb = require('../db/mongodb');

DBSchema = require('../db/mongodb/schema.js');

DBInterface = require('../db/mongodb/db-interface.js');

DBCache = (function() {
  function DBCache(DBUrl, DBName) {
    var db, dbCacheSchema;
    db = new mongodb(DBUrl, DBName);
    this.deleteTimers = {};
    dbCacheSchema = new DBSchema(db, "db_cache", {
      'key': {
        type: String,
        index: true,
        unique: true
      },
      'val': String
    });
    this.cacheInterface = new DBInterface(dbCacheSchema);
  }

  DBCache.prototype.removeEntryIfExists = function(key, callback) {
    clearTimeout(this.deleteTimers[key]);
    return this.cacheInterface["delete"]({
      "key": key
    }, function(err, obj) {
      return callback(err, obj);
    });
  };

  DBCache.prototype.set = function(key, val, ttl, callback) {
    return this.removeEntryIfExists(key, (function(_this) {
      return function(err, obj) {
        return _this.createEntry(key, val, function(err, obj) {
          _this.createCacheDeleteTimer(key, ttl);
          return callback(err, obj);
        });
      };
    })(this));
  };

  DBCache.prototype.createEntry = function(key, val, callback) {
    return this.cacheInterface.create({
      "key": key,
      "val": val
    }, callback);
  };

  DBCache.prototype.createCacheDeleteTimer = function(key, ttl) {
    return this.deleteTimers[key] = setTimeout((function(_this) {
      return function() {
        return _this.removeEntryIfExists(key, function(err, obj) {});
      };
    })(this), ttl * 1000);
  };

  DBCache.prototype.get = function(key, callback) {
    return this.cacheInterface.readOne({
      "key": key
    }, function(err, obj) {
      return callback(err, obj);
    });
  };

  return DBCache;

})();

module.exports = DBCache;
